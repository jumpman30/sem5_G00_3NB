@startuml
participant "User Interface" as UI
participant "Router" as Router
participant "ElevatorController" as Controller
participant "ElevatorService" as Service

participant "ElevatorRepository" as Repository
participant "BuildingRepository" as BRepo
participant "ElevatorMapper" as Mapper
participant "ElevatorSchema" as Schema
participant "ElevatorModel" as Model
participant "Persistence" as Persistence

activate UI
UI -> Router: POST /building/:id/elevator (json)
activate Router
Router -> Router: validate(json)
Router -> Controller: ctrl.createElevator(json)
activate Controller

Controller -> Service: reponseOrError = createElevator\n(req, res, next)
activate Service
Service -> BRepo : exists(dto.buildingId)
activate BRepo
BRepo -> Schema : exists = findOne(buildingId)
activate Schema
Schema -> Persistence:  findOne(Id)
deactivate Schema
BRepo -> Service: boolean
deactivate BRepo
alt building does not exist
Service -> Controller: res.status(422)
deactivate Service
Controller -> Router: res.status(422)
deactivate Controller
Router -> UI :status 422 "Building does not exist."
deactivate Router
end


Service -> Repository : countByBuildingId(dto.buildingId)
activate Service
activate Repository
Repository -> Schema : count = count(buildingId)
activate Schema
Schema -> Persistence:  count(Id)
deactivate Schema
Repository -> Service : count
deactivate Repository

create Model
Service -> Model: ElevatorOrError = Elevator.Create(dto, count)
alt ElevatorOrError.isFailure
Service -> Controller: res.status(422)
deactivate Service
Controller -> Router: res.status(422)
deactivate Controller
Router -> UI :status 422 (Unprocessable Entity)
deactivate Router
end
Service -> Repository: entity =\n create(ElevatorOrError.getValue())
activate Service
activate Repository
Repository -> Schema : exists = findOne(Elevator.Id)
activate Schema
Schema -> Persistence:  findOne(Id)
deactivate Schema
alt exists
Repository -> Service: res.status(409)
deactivate Service
Service -> Controller: res.status(409)
deactivate Service
Controller -> Router: res.status(409)
deactivate Controller
Router -> UI :status 409 (Conflict)
deactivate Router
end
Repository -> Mapper: rawSchema = toPersistance(entity)
activate Mapper
return rawSchema
Repository -> Schema : schema = ElevatorSchema\n.create(rawSchema)
activate Schema
Schema -> Persistence : save(schema)
deactivate Schema
Repository -> Mapper: entity = toModel(schema)
activate Mapper
Mapper -> Model: entity: <<new>>
activate Model
deactivate Model
deactivate Mapper

Repository --> Service: entity
deactivate Repository

Service -> Mapper: responseDto = roleMap.toDto(entity)
activate Mapper
create ElevatorDto
Mapper -> ElevatorDto: responseDTO <<new>>
deactivate Mapper

Service --> Controller: responseDTO
deactivate Service

Controller --> Router: responseDTO
deactivate Controller
Router --> UI: HTTP 200 OK\njson(responseDTO)
deactivate Router
deactivate UI
@enduml
